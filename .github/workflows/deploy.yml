name: Deploy to EC2

on:
  push:
    branches:
      - main




jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들 불러오기
        uses: actions/checkout@v4


      - name: graldew에 실행 권한 부여
        run: chmod +x gradlew

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -x test


      - name: 빌드 결과물 jar 이름 변경
        run: mv ./build/libs/*SNAPSHOT.jar project.jar

      # 7. EC2에 jar 파일 전송
      - name: EC2로 jar 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar
          target: /home/ubuntu/app

      # 8. EC2에 접속 후 jar 실행
      - name: EC2에 접속해서 실행하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            cd /home/ubuntu/app
            
            # 예전 프로세스 정리(둘 다)
            pkill -f 'app.jar' || true
            pkill -f 'project.jar' || true
            
            # 새로 실행(바인딩 명시)
            nohup java -jar project.jar --server.address=0.0.0.0 --server.port=8080 > app.log 2>&1 &
            
            # 잠깐 대기 후 헬스/프로세스 확인 → 우리 손으로 성공/실패 결정
            sleep 3
            if pgrep -fa 'project.jar' >/dev/null; then
              echo "APP RUNNING"
              exit 0
            else
              echo "APP NOT RUNNING"
              tail -n 200 app.log || true
              exit 1
            fi
